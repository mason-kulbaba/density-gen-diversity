#add fit (seeds) in new layer col of renewdata as numeric, called fit
fit<- as.numeric(layer=="seeds")
#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutH, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with individuals in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 10 x 4 matrix: 10 families by 4 nodes
#name the rows (by familyID) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 10 x 4 x 10 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutH, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#combine std.err with estimates, and then round
#to three decimal places
foo<- cbind(pout.amat$fit, pout.amat$se.fit)
rownames(foo)<- as.character(fred$familyID)
colnames(foo)<- c("High Den Fitness", "SE")
round(foo, 3)
H_estimates<- round(foo,3)
H_estimates
#generate MLE of saturated model mean value parameter vector: mu
pout<- predict.aster(aoutM, se.fit=TRUE)
#make design matrix
fred <- data.frame(familyID=levels(redataM$familyID), flw=1, frt=1, frt.2=1, seeds=1,root = 2)
#reshape the "made up data" just as the actual data
renewdata <- reshape(fred, varying = list(vars),
direction = "long", timevar = "varb",
times = as.factor(vars), v.names = "resp")
#make character string from "varb" of renewdata,
#without actual values (e.g., the layers of varb in renewdata)
layer<- gsub("[0-9]", "", as.character(renewdata$varb))
#add layer to renewdata
renewdata<- data.frame(renewdata, layer= layer)
#seed seed.ct in new layer col of renewdata as numeric, called fit
fit<- as.numeric(layer=="seeds")
#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with familyID in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 9 x 4 matrix: 9 families by 4 nodes
#name the rows (by Den Treat) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 9 x 4 x 9 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#combine std.err with estimates, and then round
#to three decimal places
foo<- cbind(pout.amat$fit, pout.amat$se.fit)
rownames(foo)<- as.character(fred$familyID)
colnames(foo)<- c("Med Den Fitness", "SE")
round(foo, 3)
M_estimates<- round(foo, 3)
M_estimates
#####################
#####LOW DENSITY#####
#####################
#generate MLE of saturated model mean value parameter vector: mu
pout<- predict.aster(aoutL, se.fit=TRUE)
#make data.frame of indivudals for each block (1-8)
fred <- data.frame(familyID=levels(redataL$familyID), flw=1, frt=1, frt.2=1, seeds=1,root = 2)
#reshape the "made up data" just as the actual data
renewdata <- reshape(fred, varying = list(vars),
direction = "long", timevar = "varb",
times = as.factor(vars), v.names = "resp")
#make character string from "varb" of renewdata,
#without actual values (e.g., the layers of varb in renewdata)
layer<- gsub("[0-9]", "", as.character(renewdata$varb))
#add layer to renewdata
renewdata<- data.frame(renewdata, layer= layer)
#seed seed.ct in new layer col of renewdata as numeric, called fit
fit<- as.numeric(layer=="seeds")
#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with familyID in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 8 x 4 matrix: 8 families by 4 nodes
#name the rows (by Den Treat) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 8 x 4 x 8 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutL, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#combine std.err with estimates, and then round
#to three decimal places
foo<- cbind(pout.amat$fit, pout.amat$se.fit)
rownames(foo)<- as.character(fred$familyID)
colnames(foo)<- c("Low Den Fitness", "SE")
round(foo, 3)
L_estimates<- round(foo, 3)
L_estimates
#make rownames first column and combine all estimates
library(data.table)
L_estimates<- as.data.frame(L_estimates)
M_estimates<- as.data.frame(M_estimates)
H_estimates<- as.data.frame(H_estimates)
setDT(L_estimates, keep.rownames = TRUE)[]
setDT(M_estimates, keep.rownames = TRUE)[]
setDT(H_estimates, keep.rownames = TRUE)[]
#generate MLE of saturated model mean value parameter vector: mu
pout<- predict.aster(aoutM, se.fit=TRUE)
#make design matrix
fred <- data.frame(familyID=levels(redataM$familyID), flw=1, frt=1, frt.2=1, seeds=1,root = 2)
#reshape the "made up data" just as the actual data
renewdata <- reshape(fred, varying = list(vars),
direction = "long", timevar = "varb",
times = as.factor(vars), v.names = "resp")
#make character string from "varb" of renewdata,
#without actual values (e.g., the layers of varb in renewdata)
layer<- gsub("[0-9]", "", as.character(renewdata$varb))
#add layer to renewdata
renewdata<- data.frame(renewdata, layer= layer)
#seed seed.ct in new layer col of renewdata as numeric, called fit
fit<- as.numeric(layer=="seeds")
#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with familyID in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 9 x 4 matrix: 9 families by 4 nodes
#name the rows (by Den Treat) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 9 x 4 x 9 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#combine std.err with estimates, and then round
#to three decimal places
foo<- cbind(pout.amat$fit, pout.amat$se.fit)
rownames(foo)<- as.character(fred$familyID)
colnames(foo)<- c("Med Den Fitness", "SE")
round(foo, 3)
M_estimates<- round(foo, 3)
M_estimates
#####################
#####LOW DENSITY#####
#####################
#generate MLE of saturated model mean value parameter vector: mu
pout<- predict.aster(aoutL, se.fit=TRUE)
#make data.frame of indivudals for each block (1-8)
fred <- data.frame(familyID=levels(redataL$familyID), flw=1, frt=1, frt.2=1, seeds=1,root = 2)
#reshape the "made up data" just as the actual data
renewdata <- reshape(fred, varying = list(vars),
direction = "long", timevar = "varb",
times = as.factor(vars), v.names = "resp")
#make character string from "varb" of renewdata,
#without actual values (e.g., the layers of varb in renewdata)
layer<- gsub("[0-9]", "", as.character(renewdata$varb))
#add layer to renewdata
renewdata<- data.frame(renewdata, layer= layer)
#seed seed.ct in new layer col of renewdata as numeric, called fit
fit<- as.numeric(layer=="seeds")
#add fit to renewdata
renewdata<- data.frame(renewdata, fit = fit)
#rerun prediction of aout, with "made up" renewdata
pout<- predict(aoutM, newdata= renewdata, varvar= varb,
idvar = id, root = root, se.fit = TRUE)
sapply(pout, class)
sapply(pout, length)
#put the parameter estimates into a matrix with familyID in rows
#and nodes along columns
nnode<- length(vars)
sally<- matrix(pout$fit, ncol = nnode)
dim(sally)# makes 8 x 4 matrix: 8 families by 4 nodes
#name the rows (by Den Treat) and columns (as nodes)
rownames(sally)<- unique(as.character(renewdata$familyID))
colnames(sally)<- unique(as.character(renewdata$varb))
#view matrix
round(sally, 3)
#use just totalseeds as predicted (expected) fitneses
herman<- sally[,grepl("seeds", colnames(sally))]
#Generate Standard Errors for these estimates
nFam<- nrow(fred)
nnode<- length(vars)
amat<- array(0, c(nFam, nnode, nFam))
dim(amat)# makes an 8 x 4 x 8 matrix
foo<- grepl("seeds", vars)
for(k in 1:nFam)
amat[k, foo, k]<- 1
#use aout object, with renewdata, and amat format
pout.amat<- predict(aoutL, newdata= renewdata, varvar= varb,
idvar= id, root = root, se.fit=TRUE, amat = amat)
#pout.amat$fit should be the same as file "herman"
herman
pout.amat$fit #they are the same.  Good.
#combine std.err with estimates, and then round
#to three decimal places
foo<- cbind(pout.amat$fit, pout.amat$se.fit)
rownames(foo)<- as.character(fred$familyID)
colnames(foo)<- c("Low Den Fitness", "SE")
round(foo, 3)
L_estimates<- round(foo, 3)
L_estimates
#make rownames first column and combine all estimates
library(data.table)
L_estimates<- as.data.frame(L_estimates)
M_estimates<- as.data.frame(M_estimates)
H_estimates<- as.data.frame(H_estimates)
setDT(L_estimates, keep.rownames = TRUE)[]
setDT(M_estimates, keep.rownames = TRUE)[]
setDT(H_estimates, keep.rownames = TRUE)[]
#write.table(L_estimates, file="C:/Users/Mason Kulbaba/Dropbox/Rscripts/density/Results/L_fem_est.csv", sep=",", row.names = F, quote = F)
#write.table(M_estimates, file="C:/Users/Mason Kulbaba/Dropbox/Rscripts/density/Results/M_fem_est.csv", sep=",", row.names = F, quote = F)
#write.table(H_estimates, file="C:/Users/Mason Kulbaba/Dropbox/Rscripts/density/Results/H_fem_ests.csv", sep=",", row.names = F, quote = F)
###################################################################################
##### The following code conducs LM analsysi of above and below ground biomass#####
###################################################################################
#reload data
fin<- read.csv("data/aster.dat.csv")
library(emmeans)
# subset high and low Ne data
hi<- subset(fin, Gen=="HG")
lo<- subset(fin, Gen=="LG")
#test for equal variances
library(car)
leveneTest(mass.b ~ Treat, data = lo)
# make a function for standard error
stderr<- function(x) sd(x)/sqrt(length(x))
#Generate some summary statistics first
#High Ne
#Above ground biomass
aggregate(hi$mass.a, by=list(hi$Den), mean)
aggregate(hi$mass.a, by=list(hi$Den), stderr)
#Below ground biomass
aggregate(hi$mass.b, by=list(hi$Den), mean)
aggregate(hi$mass.b, by=list(hi$Den), stderr)
#Low Ne
#Above ground biomass
aggregate(lo$mass.a, by=list(lo$Den), mean)
aggregate(lo$mass.a, by=list(lo$Den), stderr)
#Below ground biomass
aggregate(lo$mass.b, by=list(lo$Den), mean)
aggregate(lo$mass.b, by=list(lo$Den), stderr)
###############################################
#total model - above ground biomass
#log transform biomass
##############################################################
#above ground biomass
f.lm<- lm(log(mass.a) ~ (Den) , data=fin)
f.lm2<- lm(log(mass.a) ~ (Den + Gen) , data=fin)
f.lm3<- lm(log(mass.a) ~ (Den + Gen + Den*Gen) , data=fin)
anova(f.lm, f.lm2, f.lm3)
summary(f.lm)
summary(f.lm2)
summary(f.lm3)
vec<- c("Gen")
emmeans(f.lm2, "Den", type='response', by=vec)
pairs(emmeans(f.lm2, "Den", type='response', by=vec))
test(emmeans(f.lm2, "Den", type='response', by=vec))
################################################################
#Now check for position effects based on three classes
#First create classes based on plantID value
#Two middle position = 1 &12
#Abutting hexagons = 6 & 7
#remaining outer plants = 2, 3, 4, 5, 8, 9, 10, 11
#subset data based on above criteria
#reload data
fin<- read.csv("C:/Users/Mason Kulbaba/Dropbox/git/density-gen-Ne/data/aster.dat.csv")
fin$pos<- 0
fin$pos[fin$plantID == 1 | fin$plantID==12]="mid"
fin$pos[fin$plantID == 6 | fin$plantID==7]="abs"
fin$pos[fin$plantID == 2 | fin$plantID==3| fin$plantID == 4 | fin$plantID==5|fin$plantID == 8| fin$plantID==9| fin$plantID == 10 | fin$plantID==11]="outer"
fin$pos<- as.factor(fin$pos)
#analysis with position
l<- lm(log(mass.a) ~ plotID, data=fin)
l2<- lm(log(mass.a) ~ plotID + Den, data=fin)
l3<- lm(log(mass.a) ~ plotID + Den +Gen, data=fin)
l4<- lm(log(mass.a) ~ plotID + Den + Gen +Den*Gen, data=fin)
lb<- lm(log(mass.b) ~ plotID, data=fin)
lb2<- lm(log(mass.b) ~ plotID + Den, data=fin)
lb3<- lm(log(mass.b) ~ plotID + Den + Gen, data=fin)
lb4<- lm(log(mass.b) ~ plotID + Den + Gen +Den*Gen, data=fin)
anova(lb, lb2, lb3, lb4)
#check for positional effect
lm1<- lm(log(mass.a) ~ (Den) , data=fin)
lm2<- lm(log(mass.a) ~ (Den + pos) , data=fin)
lm3<- lm(log(mass.a) ~ Den + pos + Den*pos , data=fin)
anova(lm1, lm2, lm3)
summary(lm1)
summary(lm2)
summary(lm3)
library(lmtest)
coeftest(lm3)
lm2<- lm(log(mass.a) ~ (Den + Gen) , data=fin)
lm3<- lm(log(mass.a) ~ (Den + Gen + Den*Gen) , data=fin)
lm4<- lm(log(mass.a) ~ (Den + Gen + Den*Gen + pos) , data=fin)
anova(lm, lm2, lm3, lm4)
summary(l)
summary(lm)
summary(lm2)
summary(lm3)
summary(lm4)
vec<- c("Gen")
emmeans(lm4, "Den", type='response', by=vec)
pairs(emmeans(lm4, "Den", type='response', by=vec))
test(emmeans(lm4, "Den", type='response', by=vec))
#redo with analysis of below ground biomass
lm<- lm(log(mass.b) ~ (Den) , data=fin)
lm2<- lm(log(mass.b) ~ (Den + Gen) , data=fin)
lm3<- lm(log(mass.b) ~ (Den + Gen + Den*Gen) , data=fin)
lm4<- lm(log(mass.b) ~ (Den + Gen + Den*Gen + pos) , data=fin)
anova(lm, lm2, lm3, lm4)
summary(lm)
summary(lm2)
summary(lm3)
summary(lm4)
vec<- c("Den")
emmeans(lm4, "Den", type='response', by=vec)
pairs(emmeans(lm4, "Den", type='response', by=vec))
test(emmeans(lm4, "Den", type='response', by=vec))
#below ground biomass
b.lm<- lm(log(mass.b) ~ (Den) , data=fin)
b.lm2<- lm(log(mass.b) ~ (Den + Gen) , data=fin)
b.lm3<- lm(log(mass.b) ~ (Den + Gen + Den*Gen) , data=fin)
anova(b.lm, b.lm2, b.lm3)
summary(b.lm)
summary(b.lm2)
summary(b.lm3)
emmeans(b.lm2, "Den", type='response', by=vec)
pairs(emmeans(b.lm2, "Den", type='response', by=vec))
test(emmeans(b.lm2, "Den", type='response', by=vec))
##########################################################################
##### The following code describes the LM analysis of aborted embryos#####
##########################################################################
#Load data
fin<- read.csv("data/aster.dat.csv")
#change class of factor variables
fin$Den<- as.factor(fin$Den)
fin$Gen<- as.factor(fin$Gen)
fin$plotID<- as.factor(fin$plotID)
fin$plantID<- as.factor(fin$plantID)
fin$familyID<- as.factor(fin$familyID)
#################################################################
#aboted embryo analysis with linear models
lm<- lm(log(aborted +1) ~ plotID , data=fin)
lm1<- lm(log(aborted +1) ~ plotID+Den , data=fin)
lm2<- lm(log(aborted +1) ~ plotID+Den + Gen, data=fin)
lm3<- lm(log(aborted +1) ~ plotID+Gen + Den + Den*Gen, data=fin)#interaction not significant
anova(lm, lm1, lm2, lm3)
summary(lm)
summary(lm1)
summary(lm2)
summary(lm3)
emmeans(lm3, "Den", "Gen", type="response")
#plot(emmeans(lm3, "Den", "Gen", type="response"))
pairs(emmeans(lm3, "Den","Gen", type="response"))
test(emmeans(lm3, "Den","Gen", type="response"))
###########################
#Upon advice of Reviewer 2: any association between fitness (seeds set/seeds sired) and flower number?
# note, frt represents all flowers
lm1<- lm(log(seeds +1) ~ frt, data=fin)
lm2<- lm(log(seeds +1) ~ Den +frt, data=fin)
lm3<- lm(log(seeds +1) ~ Den +Gen+frt, data=fin)
anova(lm1, lm2, lm3)
summary(lm3)
library(MASS)
flw<- fin$frt
sd<- fin$seeds
flw1<- fitdistr(flw, densfun = "normal")
flw2<- fitdistr(flw, densfun = "negative binomial")
flw3<- fitdistr(flw, densfun = "Poisson")
AIC(flw1, flw2, flw3)
seed1<- fitdistr(sd, densfun = "normal")
seed2<- fitdistr(sd, densfun = "negative binomial")
seed3<- fitdistr(sd, densfun = "Poisson")
AIC(seed1, seed2, seed3)
gs<- glm(seeds ~ Den + Gen + flw, family=poisson, data=fin)
summary(gs)
#quick plots by den
high<- subset(fin, Den=="H")
med<- subset(fin, Den=="M")
low<- subset(fin, Den=="L")
plot(high$frt, high$seeds)
plot(med$frt, med$seeds)
plot(low$frt, low$seeds)
###########################################################################
# Analysis of proportion of aborted embryos
#Load data
fin<- read.csv("data/aster.dat.csv")
#first, make variable of sum of aborted ovules and seeds: fertilized ovules
fin$fert.ovules<- (fin$aborted + fin$seeds)
#name make column of proportion of aborted embryos
fin$prop.abort<- fin$aborted / fin$fert.ovules
#Change NA to zeros
#fin[is.na(fin)] <- 0
#try removing na
#fin<- fin[complete.cases(fin), ]
#plantID and plotID as factor
fin$plantID<- as.factor(fin$plantID)
fin$plotID<- as.factor(fin$plotID)
#make two column resoonse object for binomial
#These models yield probability of successfull seed set
resp<- cbind(fin$seeds, fin$fert.ovules)
resp2<- cbind(fin$seeds, fin$aborted)
t<- glm(resp2 ~ Den,family='binomial', data=fin)
t1<- glm(resp2 ~ Den + Gen,family='binomial', data=fin)
t2<- glm(resp2 ~ Den + Gen + (Den*Gen),family='binomial', data=fin)
t3<- glm(resp2 ~ plotID + Den + Gen + (Den*Gen),family='binomial', data=fin)
summary(t)
summary(t1)
summary(t2)
summary(t3)
AIC(t, t1, t2, t3)
anova(t, t1, t2, t3)
library(emmeans)
emmeans(t3,"Den","Gen", type="response")
pairs(emmeans(t3, "Gen", "Den", type='response'))
test(emmeans(t3,"Den", "Gen", type='response'))
# following models yield probability of embryo abortion
resp.abort<- cbind(fin$aborted, fin$seeds)
t<- glm(resp.abort ~ Gen,family='binomial', data=fin)
t1<- glm(resp.abort ~  Den + Gen,family='binomial', data=fin)
t2<- glm(resp.abort ~  Gen + Den + (Gen*Den) ,family='binomial', data=fin)
t3<- glm(resp.abort ~  Gen + Den + (Gen*Den) + plotID ,family='binomial', data=fin)
summary(t)
summary(t1)
summary(t2)
summary(t3)
AIC(t, t1, t2, t3)
anova(t, t1, t2, t3)
library(emmeans)
emmeans(t3,"Den","Gen", type="response")
pairs(emmeans(t3, "Gen", "Den", type='response'))
test(emmeans(t3,"Den", "Gen", type='response'))
